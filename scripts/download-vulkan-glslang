#!/usr/bin/env bash

# Copyright 2016 The Fuchsia Authors
#
# Use of this source code is governed by a MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT

# In order to compile GLSL to SPIR-V on the fly, Escher uses the code found in
# $VULKAN_SDK/source/glslang.  The Vulkan SDK uses this code to build the
# standalone "glslangValidator" executable, but does not provide binaries for
# the constituent libraries.  We have built these libraries from source using
# $VULKAN_SDK/source/glslang/CMakeLists.txt and uploaded them to Google Storage.
# This script is called by the "download-vulkan-sdk" script, and installs the
# glslang libraries within the just-downloaded Vulkan SDK.

# Only Linux x86_64 supported for now.
readonly PLATFORM="linux"
readonly ARCH="x86_64"

if [ "$(uname)" != "Linux" ]; then
  exit 0
fi

readonly SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
readonly INSTALL_DIR="${SCRIPT_DIR}/../third_party/vulkansdk/${ARCH}/lib/glslang"
readonly TEMP_DIR=$(mktemp -d /tmp/escher-download-vulkan-glslang.XXXXXX)
if [ $? -ne 0 ]; then
  echo "ERROR: Escher download-vulkan-glslang: failed to create TEMP_DIR !!"
  exit 99
fi

# Called when something goes wrong.
panic () {
  echo "ERROR: Escher download-vulkan-glslang: $1"
  rm -fr "${TEMP_DIR}"
  exit 99
}

# Obtain the SHA of the binary glslang libraries.
readonly REQUIRED_SHA_FILE="${SCRIPT_DIR}/../third_party/SHAs/required/vulkansdk-glslang"
if [ ! -f "${REQUIRED_SHA_FILE}" ]; then
  panic "Required SHA file does not exist ${REQUIRED_SHA_FILE}"
fi
readonly REQUIRED_SHA=$(cat "${REQUIRED_SHA_FILE}" | tr -d '[[:space:]]')
if [ ${#REQUIRED_SHA} != 64 ]; then
  panic "Required SHA file does not contain Base-64 encoded SHA-256 (hash: ${REQUIRED_SHA} file: ${REQUIRED_SHA_FILE})"
fi

# Compare SHAs to decide whether the correct glslang libraries are already installed.
readonly INSTALLED_SHA_FILE="${SCRIPT_DIR}/../third_party/SHAs/installed/vulkansdk-glslang"
if [ -f "${INSTALLED_SHA_FILE}" ]; then
  readonly INSTALLED_SHA=$(cat "${INSTALLED_SHA_FILE}" | tr -d '[[:space:]]')
  if [ "${REQUIRED_SHA}" = "${INSTALLED_SHA}" ]; then
    # Required libs are already installed.
    rm -fr "${TEMP_DIR}"
    exit 0
  fi
fi

echo "Escher: Downloading glslang binary libs from Google Storage."
readonly GS_BUCKET="https://fuchsia-build.storage.googleapis.com/lib/escher/third_party/vulkansdk-glslang/$PLATFORM/$ARCH"
readonly GS_PATH="${GS_BUCKET}/${REQUIRED_SHA}"
readonly LIBS_TAR_GZ="${TEMP_DIR}/glslang.tar.gz"
curl "${GS_PATH}" --output ${LIBS_TAR_GZ}
if [ $? -ne 0 ]; then
  panic "Failed to download glslang binary libs from Google Storage: ${GS_PATH} !!"
fi

echo "Escher: Decompressing and installing glslang binary libs."
cd "${TEMP_DIR}"
tar zxf "${LIBS_TAR_GZ}"
if [ $? -ne 0 ]; then
  panic "Decompression failed !!"
fi

echo "Escher: Moving glslang binary libs to final location."
rm -fr "${INSTALL_DIR}"
mv glslang "${INSTALL_DIR}"
mkdir -p "${SCRIPT_DIR}/../third_party/SHAs/installed"
cp -f "${REQUIRED_SHA_FILE}" "${INSTALLED_SHA_FILE}"
rm -fr "${TEMP_DIR}"
